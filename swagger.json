{
  "openapi": "3.0.0",
  "info": {
    "title": "Áskell API",
    "description": "# Authentication\nAuthentication is via `Authorization` header. When using this documentation to test the API you should prepend your given api key with `\"Api-Key \"`. \nYou are given two types of API keys, one public and one secret. Your public key is safe to use in javascript so that it is public to the world. It can only \nbe used to generate a temporary payment method, which in turn has to be confirmed using your secret api key.\n",
    "termsOfService": "https://askell.is/",
    "contact": {
      "email": "hallo@overcast.is"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://askell.is/api/"
    }
  ],
  "security": [
    {
      "Secret-Api-Key": []
    },
    {
      "Public-Api-Key": []
    }
  ],
  "tags": [
    {
      "name": "Customer",
      "description": "Customer operations, requires secret api key."
    },
    {
      "name": "Subscription",
      "description": "Subscription operations, requires secret api key."
    },
    {
      "name": "Plan",
      "description": "Plan operations, requires a secret api key."
    },
    {
      "name": "Temporary payment method",
      "description": "Requires a public api key."
    },
    {
      "name": "Webhooks",
      "description": "Various webhooks"
    },
    {
      "name": "Transaction",
      "description": "Transaction operations, requires secret api key."
    }
  ],
  "paths": {
    "/plans/": {
      "get": {
        "tags": ["Plan"],
        "summary": "Get a list of plans",
        "description": "Lists all plans. Requires a secret key.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plan"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/transactions/{uuid}/receipt/": {
      "get": {
        "tags": ["Transaction"],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of transaction",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Create a receipt for transaction",
        "description": "Create a receipt for transaction. Requires a secret key.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/customers/": {
      "get": {
        "tags": ["Customer"],
        "summary": "Get a list of customers",
        "description": "Lists all customers. Requires a secret key.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      },
      "post": {
        "tags": ["Customer"],
        "summary": "Create a customer",
        "description": "Create a customer in Áskell. Requires a secret key. To make it easier linking customers to existing  systems, it is your responsibility to assign a reference to the customer so that you can look  them up later. This can be an id, a UUID or whatever suits you. It's best to keep it simple.\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Customer"
        },
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/customers/{customerReference}/subscriptions/": {
      "get": {
        "tags": ["Customer"],
        "summary": "Get all subscriptions for a customer",
        "parameters": [
          {
            "name": "customerReference",
            "in": "path",
            "description": "Customer reference (customer_reference) in your system of customer to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/customers/{customerReference}/subscriptions/add/": {
      "post": {
        "tags": ["Customer"],
        "summary": "Add subscription to a customer",
        "parameters": [
          {
            "name": "customerReference",
            "in": "path",
            "description": "Customer reference (customer_reference) in your system of customer to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CustomerAddSubscription"
        },
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/customers/{customerReference}/": {
      "get": {
        "tags": ["Customer"],
        "summary": "Get a customer",
        "description": "Get a customer which has already been created. You need to supply your chosen customer reference. Requires a secret key.\n",
        "parameters": [
          {
            "name": "customerReference",
            "in": "path",
            "description": "Customer reference (customer_reference) in your system of customer to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      },
      "put": {
        "tags": ["Customer"],
        "summary": "Update a customer",
        "description": "Update a customer which has already been created. You must supply all required fields. Requires a secret key.\n",
        "parameters": [
          {
            "name": "customerReference",
            "in": "path",
            "description": "Customer reference (customer_reference) in your system of customer to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      },
      "delete": {
        "tags": ["Customer"],
        "summary": "Delete a customer",
        "description": "Delete a customer. Requires a secret key.\n",
        "parameters": [
          {
            "name": "customerReference",
            "in": "path",
            "description": "Customer reference (customer_reference) in your system of customer to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      },
      "patch": {
        "tags": ["Customer"],
        "summary": "Partially update a customer",
        "description": "Update a customer which has already been created. All fields are optional. Requires a secret key.",
        "parameters": [
          {
            "name": "customerReference",
            "in": "path",
            "description": "Customer reference (customer_reference) in your system of customer to return",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/customers/paymentmethod/": {
      "post": {
        "tags": ["Customer"],
        "summary": "Add a payment method to customer.",
        "description": "Requires a secret key. You must first acquire a temporary payment method token using `/temporarypaymentmethod/` and use that in your post body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAddPaymentMethod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found"
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/subscriptions/": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Get all subscriptions",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscription"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/subscriptions/multi/": {
      "post": {
        "tags": ["Subscription"],
        "summary": "Create multiple subscriptions",
        "requestBody": {
          "$ref": "#/components/requestBodies/Subscription"
        },
        "responses": {
          "201": {
            "description": "Response when creating multiple subscriptions for one customer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_201"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/subscriptions/{subscriptionId}/": {
      "get": {
        "tags": ["Subscription"],
        "summary": "Get a single subscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Subscription id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/subscriptions/{subscriptionId}/cancel/": {
      "post": {
        "tags": ["Subscription"],
        "summary": "Cancel a subscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Subscription id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/subscriptions/{subscriptionId}/activate/": {
      "post": {
        "tags": ["Subscription"],
        "summary": "Activate a cancelled subscription. This will only work if the latest subscription billing period has not passed.",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "Subscription id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_2"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/temporarypaymentmethod/": {
      "post": {
        "tags": ["Temporary payment method"],
        "summary": "Create a temporary payment method from a credit card",
        "description": "The resulting `token` is a reference to a temporary payment method. You have to confirm this payment method by e.g. using it to activate a subscription, or adding a new payment method to a customer. Requires a public api key. \n",
        "requestBody": {
          "$ref": "#/components/requestBodies/PaymentMethodCreate"
        },
        "responses": {
          "201": {
            "description": "Response when creating a temporary payment method",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_201_2"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          }
        },
        "security": [
          {
            "Public-Api-Key": []
          }
        ]
      }
    },
    "/temporarypaymentmethod/{token}/": {
      "get": {
        "tags": ["Temporary payment method"],
        "summary": "Check the status of a temporary payment methd token when dealing with 3D secure.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Temporary payment method token returned from /api/temporarypaymentmethod/",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "description": "When the 'status' attribute of the response returns 'success', you can use the token to confirm payments.",
        "responses": {
          "200": {
            "description": "Response when creating a temporary payment method",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_201_2"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          }
        },
        "security": [
          {
            "Public-Api-Key": []
          }
        ]
      }
    },
    "/payments/": {
      "get": {
        "tags": ["Payment"],
        "summary": "Get a list of Payments",
        "description": "Lists all payments. Requires a secret key.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      },
      "post": {
        "tags": ["Payment"],
        "summary": "Create a payment",
        "description": "Create a single payment in Áskell. Requires a secret key. A payment is executed asynchronously which means that you will have to rely on checking the status of the payment after creating it, or rely on webhooks. You can check the status of the payment using the uuid supplied when the payment is initially created.\n\nInitially, the payment will have the state 'pending'. If the payment is successful, the state will be 'settled'. If the payment fails, the state will be 'failed'.\n If you decide to retry the payment, the payment might have the state 'retrying'.\n\nTo summarize, the four states are:\n\n* pending\n* settled\n* failed\n* retrying\n\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/Payment"
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentInitial"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_400"
                }
              }
            }
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/payments/{uuid}/retry/": {
      "post": {
        "tags": ["Payment"],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "summary": "Retry a failed Payment",
        "description": "If a Payment is in the failed state, you can retry it up to 4 times. Requires a secret key.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "Secret-Api-Key": []
          }
        ]
      }
    },
    "/your-webhook-url/": {
      "post": {
        "tags": ["Webhooks"],
        "summary": "Called when subscription changed or renewed",
        "description": "We recommend that you verify all calls from us to your webhook endpoints. We sign each request with the `Hook-HMAC` header. The value is a HMAC digest derived from the body of the request and a secret key only known by the API and you. We also supply the type of event in the `Hook-Event` header.\n\nHere is a sample implementation in Python. This process is very similar to the one Shopify uses so more information can possibly be gleaned from their [documentation](https://shopify.dev/tutorials/manage-webhooks#verify-webhook).\n```\nimport base64\nimport hmac\nimport hashlib\n\nWEBHOOK_SECRET = \"Your webhook secret\".encode()\nWEBHOOK_DIGEST_TYPE = 'sha512'\n\ndef verify(hmac_header, digest_method, secret, message):\n   digestmod = getattr(hashlib, digest_method)\n   signed = base64.b64encode(\n       hmac.new(secret, message, digestmod).digest(),\n   ).strip()\n   return hmac.compare_digest(signed, hmac_header)\n\n# your view function\ndef handle_webhook(request):\n   # The signature\n   digest = request.META.get('HTTP_HOOK_HMAC').encode()\n   # The name of the webhook event\n   event = request.META.get('HTTP_HOOK_EVENT').encode()\n\n   body = request.body\n   if verify(digest, WEBHOOK_DIGEST_TYPE, WEBHOOK_SECRET, body):\n       payload = json.loads(body)\n       # ... the rest of your code here```\n",
        "requestBody": {
          "$ref": "#/components/requestBodies/SubscriptionMultiLite"
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Plan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Name of the plan."
          },
          "alternative_name": {
            "type": "string",
            "example": "A slightly longer name or more descriptive."
          },
          "reference": {
            "type": "string",
            "example": "SKU-1"
          },
          "interval": {
            "type": "string",
            "example": "day|week|month|year"
          },
          "interval_count": {
            "type": "integer",
            "example": 1
          },
          "amount": {
            "type": "string",
            "example": "1.0000"
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "trial_period_days": {
            "type": "integer",
            "example": 0
          },
          "description": {
            "type": "string",
            "example": "A longer description."
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "private": {
            "type": "boolean",
            "example": false
          },
          "electronic_only": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "verified": {
            "type": "boolean",
            "example": true
          },
          "canceled": {
            "type": "boolean",
            "example": false
          },
          "valid_until": {
            "type": "string",
            "format": "date-time",
            "example": "2022-11-01T00:00:00Z"
          },
          "display_info": {
            "type": "string",
            "example": "XXXX-XXXX-XXXX-2887 (MasterCard)"
          }
        }
      },
      "PaymentMethodCreate": {
        "required": [
          "card_number",
          "cvv_number",
          "expiration_month",
          "expiration_year"
        ],
        "type": "object",
        "properties": {
          "card_number": {
            "type": "string",
            "example": "9999999999999999"
          },
          "expiration_year": {
            "maxLength": 2,
            "type": "string",
            "example": "22"
          },
          "expiration_month": {
            "maxLength": 2,
            "type": "string",
            "example": "11"
          },
          "cvv_number": {
            "type": "string",
            "example": "123"
          },
          "plan": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "PaymentMethodTokenCreate": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "637302f0412e2e11adc0ba21adafcf11"
          }
        }
      },
      "CustomerAddPaymentMethod": {
        "required": ["customer_reference", "token"],
        "type": "object",
        "properties": {
          "customer_reference": {
            "type": "string",
            "example": "12345"
          },
          "token": {
            "type": "string",
            "example": "637302f0412e2e11adc0ba21adafcf11"
          }
        }
      },
      "CustomerCreate": {
        "required": ["customer_reference", "email", "first_name", "last_name"],
        "type": "object",
        "properties": {
          "first_name": {
            "maxLength": 128,
            "type": "string",
            "example": "Jón"
          },
          "last_name": {
            "maxLength": 128,
            "type": "string",
            "example": "Jónsson"
          },
          "email": {
            "maxLength": 254,
            "type": "string",
            "example": "email@example.com"
          },
          "customer_reference": {
            "maxLength": 256,
            "type": "string",
            "example": "1234"
          }
        }
      },
      "Customer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomerCreate"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "payment_method": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          }
        ]
      },
      "Payment": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "string",
            "example": "100.00"
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "description": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "example": "settled",
            "enum": ["failed", "settled", "pending", "retrying"]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "PaymentInitial": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "string",
            "example": "100.00"
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "description": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "example": "pending",
            "enum": ["failed", "settled", "pending", "retrying"]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "PaymentCreate": {
        "type": "object",
        "required": ["customer_reference", "amount", "currency"],
        "properties": {
          "customer_reference": {
            "type": "string",
            "example": "12345"
          },
          "amount": {
            "type": "string",
            "example": "100.00"
          },
          "currency": {
            "type": "string",
            "example": "USD"
          },
          "description": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 123
          },
          "trial_end": {
            "type": "string",
            "format": "date-time"
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time"
          },
          "active_until": {
            "type": "string",
            "format": "date-time"
          },
          "reference": {
            "type": "string",
            "example": "REF-12345"
          },
          "description": {
            "type": "string"
          },
          "is_on_trial": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "meta": {
            "type": "string",
            "format": "json"
          },
          "token": {
            "type": "string",
            "example": "637302f0412e2e11adc0ba21adafcf11"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "billing_logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingLog"
            }
          }
        }
      },
      "SubscriptionNoBillingLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 123
          },
          "trial_end": {
            "type": "string",
            "format": "date-time"
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time"
          },
          "active_until": {
            "type": "string",
            "format": "date-time"
          },
          "reference": {
            "type": "string",
            "example": "REF-12345"
          },
          "description": {
            "type": "string"
          },
          "is_on_trial": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "meta": {
            "type": "string",
            "format": "json"
          },
          "token": {
            "type": "string",
            "example": "637302f0412e2e11adc0ba21adafcf11"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "BillingLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "billing_log_type": {
            "type": "string",
            "enum": ["trial", "renewal"]
          },
          "billing_date": {
            "type": "string",
            "format": "date-time"
          },
          "plan_billed_up_to": {
            "type": "string",
            "format": "date-time"
          },
          "total": {
            "type": "string",
            "format": "money",
            "nullable": true,
            "example": "6.99"
          },
          "transaction": {
            "$ref": "#/components/schemas/Transaction"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "data": {
            "type": "object",
            "description": "Arbitrary data on transaction from payment processor\n"
          },
          "state": {
            "type": "string",
            "enum": [
              "failed",
              "settled",
              "inital",
              "pending",
              "canceled",
              "refunded"
            ]
          },
          "amount": {
            "type": "string",
            "example": "6.99"
          },
          "currency": {
            "type": "string",
            "example": "USD"
          }
        }
      },
      "SubscriptionCreate": {
        "type": "object",
        "required": ["plan", "reference"],
        "properties": {
          "plan": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "reference": {
            "type": "string",
            "example": "Sub-12345"
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-11-01T00:00:00Z",
            "required": false
          },
          "amount": {
            "type": "string",
            "example": "1500",
            "required": "false",
            "description": "Amount to overwrite the plan amount"
          },
          "discount": {
            "type": "string",
            "example": "10",
            "required": "false",
            "description": "Discount percentage, from 0 to 100. A value of 10 means 10% discount, calculated on the next charge."
          }
        }
      },
      "SubscriptionCreateMulti": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/CustomerCreate"
          },
          "payment_method": {
            "$ref": "#/components/schemas/PaymentMethodTokenCreate"
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionCreate"
            }
          }
        }
      },
      "inline_response_400": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "error": {
            "type": "string",
            "example": "Validation error"
          }
        }
      },
      "inline_response_201": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          }
        }
      },
      "inline_response_200_1": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "example": "canceled"
          }
        }
      },
      "inline_response_200_2": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "example": "active"
          }
        }
      },
      "inline_response_201_2": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "637302f0412e2e11adc0ba21adafcf11"
          },
          "card_verification_url": {
            "type": "string",
            "example": "https://askell.is/verify/637302f0412e2e11adc0ba21adafcf11/"
          }
        }
      }
    },
    "responses": {
      "SubscriptionMulti": {
        "description": "Response when creating multiple subscriptions for one customer",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_201"
            }
          }
        }
      },
      "TemporaryPaymentMethodCreate": {
        "description": "Response when creating a temporary payment method",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_201_2"
            }
          }
        }
      }
    },
    "requestBodies": {
      "Customer": {
        "description": "Customer object",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomerCreate"
            }
          }
        },
        "required": true
      },
      "Payment": {
        "description": "Payment object",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentCreate"
            }
          }
        },
        "required": true
      },
      "CustomerAddSubscription": {
        "description": "Customer add subscription object",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SubscriptionCreate"
            }
          }
        },
        "required": true
      },
      "Subscription": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SubscriptionCreateMulti"
            }
          }
        }
      },
      "PaymentMethodCreate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentMethodCreate"
            }
          }
        }
      },
      "SubscriptionMultiLite": {
        "description": "Response when creating multiple subscriptions for one customer",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "customer": {
                  "$ref": "#/components/schemas/Customer"
                },
                "subscriptions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionNoBillingLog"
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Secret-Api-Key": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      },
      "Public-Api-Key": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}
